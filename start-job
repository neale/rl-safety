#!/usr/bin/env python3

"""
Main entry point for starting a training job.
"""

import os
import sys
import argparse
import subprocess
import shutil
import logging
import logging.config


parser = argparse.ArgumentParser()
parser.add_argument('run_name', nargs='?', help="a name for the new run")
parser.add_argument('--install', action="store_true")
parser.add_argument('--shutdown', action="store_true", help=""
    "Shut down the system when the job is complete.")
parser.add_argument('--port', default=6006, type=int)
parser.add_argument('--agent', default='ppo', type=str)
args = parser.parse_args()


# Setup the directories

safety_dir = os.path.realpath(os.path.join(__file__, '../'))
data_base_dir = os.path.join(safety_dir, 'data')
active_run_file = os.path.join(safety_dir, 'data/active_run.txt')
sys.path.insert(1, safety_dir)  # ensure current directory is on the path
os.chdir(safety_dir)

# If the run name isn't suppied, get it from 'active_run.txt'
# This is basically just used to restart after crashes.
if not args.run_name:
    try:
        with open(active_run_file) as f:
            run_name = f.read().strip()
        print("Setting `run_name` from `active_run.txt`")
    except:
        print("No run name was supplied. Aborting.")
        exit()
else:
    run_name = args.run_name
os.makedirs(data_base_dir, exist_ok=True)
with open(active_run_file, 'w') as f:
    f.write(run_name)


data_dir = os.path.join(safety_dir, 'data', run_name)
if os.path.exists(data_dir) and args.run_name is not None:
    print("The directory '%s' already exists. "
          "Would you like to overwrite the old data, append to it, or abort?" %
          data_dir)
    response = None
    response = 'overwrite' if args.run_name == 'tmp' else None
    while response not in ('overwrite', 'append', 'abort'):
        response = input("(overwrite / append / abort) > ")
    if response == 'overwrite':
        print("Overwriting old data.")
        shutil.rmtree(data_dir)
    elif response == 'abort':
        print("Aborting.")
        exit()

os.makedirs(data_dir, exist_ok=True)
logfile = os.path.join(data_dir, 'training.log')


# Setup logging

if not os.path.exists(logfile):
    open(logfile, 'w').close()  # write an empty file
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{levelname:8s} {message}',
            'style': '{',
        },
        'dated': {
            'format': '{asctime} {levelname} ({filename}:{lineno}) {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'INFO',
            'stream': 'ext://sys.stdout',
            'formatter': 'simple',
        },
        'logfile': {
            'class': 'logging.FileHandler',
            'level': 'INFO',
            'formatter': 'dated',
            'filename': logfile,
        }
    },
    'loggers': {
        'training': {
            'level': 'INFO',
            'propagate': False,
            'handlers': ['console', 'logfile'],
        }
    },
    'root': {
        'level': 'WARNING',
        'handlers': ['console', 'logfile'],
    }
})


# Install dependencies if they aren't already there

if args.install:
    reqs_file = os.path.join(safety_dir, "requirements.txt")
    subprocess.run("sudo apt-get install ffmpeg --yes".split())
    subprocess.run(["sudo", "pip3", "install", "-r", reqs_file])
# By making the build lib the same as the base folder, the extension
# should just get built into the source directory.
subprocess.run([
    "python3", os.path.join(safety_dir, "setup.py"),
    "build", "--build-lib", safety_dir
])


# Start tensorboard

if args.port:
    tb_proc = subprocess.Popen([
        "tensorboard", "--logdir", run_name + ':' + data_dir, '--port', str(args.port)])


# Start training!

try:
    from training.safelife_ppo import SafeLifePPO as ppo_default
    from training.safelife_ppo_baseline import SafeLifePPO as ppo
    from training.safelife_sac_baseline import SafeLifeSAC as sac
    from training.safelife_ddpg_baseline import SafeLifeDDPG as ddpg
    if args.agent == 'ppo_default':
        model = ppo_default(logdir=data_dir)
    if args.agent == 'ppo':
        model = ppo(logdir=data_dir)
    if args.agent == 'sac':
        model = sac(logdir=data_dir)
    if args.agent == 'ddpg':
        model = ddpg(logdir=data_dir)
    model.train()
except Exception:
    logging.exception("Ran into an unexpected error. Aborting training.")
finally:
    if args.port:
        tb_proc.kill()
    if os.path.exists(active_run_file):
        os.remove(active_run_file)
    if args.shutdown:
        # Shutdown in 3 minutes.
        # Enough time to recover if it crashed at the start.
        subprocess.run("sudo shutdown +3".split())
        print("Shutdown commenced. Exiting to bash.")
        subprocess.run(["bash", "-il"])
